### Планы по Самовару

1. Страница библиотеки
    - Доработать и реализовать:
       1. механизм получения извещения об обновлении пакетов
       2. механизм обновления пакетов
       3. механизм удаления пакетов
       4. механизм передачи отзывов
            - проверить отправку на сервер типов отзывов
   - увеличить ширину модальных окон отвечающих за показ версий

2. Проработать механизм закрепления за каждым пунктом меню своей функции вызова и прорисовки страницы по принципу:
   одна страница загрузки с подгрузкой и выгрузкой данных

3. Перенести все константы с указанием путей к файлам во всем коде в отдельный файл, в котором бы можно было бы просто менять структуру их хранения

4. Сделать возможным вычисление и показ числа столбцов для выравнивания главного окна в автоматическом режиме





РЕШЕНО:

1. Устранить причину отсутствия фокуса ввода при отправке обратной связи к Самовару
2. Разработать механизм или использовать имеющийся, чтобы реализовать появление сообщений из очереди, а не параллельно, как сейчас.
3. Проанализировать плюсы и минусы перехода на WebSocket и если да, то переписать сервер и клиента для этого
    - Flask-SocketIO для реализации сервера
        + https://tutorials.technology/tutorials/61-Create-an-application-with-websockets-and-flask.html
        + https://blog.miguelgrinberg.com/post/easy-websockets-with-flask-and-gevent
    - WebSocket++ на C++
        + https://github.com/zaphoyd/websocketpp или
        + https://gitlab.com/eidheim/Simple-WebSocket-Server
    - Ably-js для клиентов на js
        + https://github.com/ably/ably-js

    Вывод:
        Лучшее решения для Самовара, но есть трудности
            - переписать сервер на c++ для роутера
            - переписать клиентскую часть
            - переписать сервер на Flask для сбора рейтинга
        Потому, можно переписать на WebSocket, уже после выпуска рабочей версии.
